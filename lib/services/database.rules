service cloud.firestore {
   match /databases/{database}/documents {
     match /projects/{project} {
        function isSignedIn() {
          return request.auth != null;
        }

        function getRole(rsc) {
          return rsc.data.roles[request.auth.uid];
        }

        function isOneOfRoles(rsc, array) {
          return isSignedIn() && (getRole(rsc) in array);
        }

        function isValidNewProject() {
          return request.resource.data.roles[request.auth.uid] == 'owner';
        }

        function onlyContentChanged() {
          // Ensure that title and roles are unchanged and that no new
          // fields are added to the document.
          return request.resource.data.title == resource.data.title
            && request.resource.data.roles == resource.data.roles
            && request.resource.data.keys() == resource.data.keys();
        }

        // Split writing into creation, deletion, and updating. Only an
        // owner can create or delete a project but a editor can update
        // project content.
        allow create: if isValidNewProject();
        allow delete: if isOneOfRoles(resource, ['owner']);
        allow update: if isOneOfRoles(resource, ['owner'])
                      || (isOneOfRoles(resource, ['editor']) && onlyContentChanged());
        allow read: if isOneOfRoles(resource, ['owner', 'editor', 'commenter', 'reader']);

        match /comments/{comment} {
          allow read: if isOneOfRoles(get(/databases/$(database)/documents/projects/$(project)),
                                      ['owner', 'editor', 'commenter', 'reader']);
          allow create: if isOneOfRoles(get(/databases/$(database)/documents/projects/$(project)),
                                        ['owner', 'editor', 'commenter'])
                        && request.resource.data.user == request.auth.uid;
        }
     }
   }
}